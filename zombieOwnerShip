pragma solidity ^0.5.12;

import "./zombieHelper.sol";
import "./erc721.sol";

contract ZombieOwnerShip is ZombieHelper,ERC721{
    //批准映射，批准之后要有记录
    mapping(uint=>address) zombieApprovals;

    function balanceOf(address _owner) public view returns (uint256 _balance){
        return ownerZombieCount[_owner];
    }
    function ownerOf(uint256 _tokenId) public view returns (address _owner){
        return zombieToOwner[_tokenId];
    }
    //内部transfer函数有下划线，
    function _transfer(address _from,address _to,uint256 _tokenId) internal{
        //完成转移
        ownerZombieCount[_to]=ownerZombieCount[_to].add(1);
        ownerZombieCount[_from]=ownerZombieCount[_from].sub(1);
        zombieToOwner[_tokenId]=_to;
        //触发事件
        emit Transfer(_from, _to, _tokenId);

    }
    //对外公布函数
    function transfer(address _to,uint256 _tokenId) public{
        _transfer(msg.sender,_to,_tokenId);
    }
    function takeOwnership(uint256 _tokenId) public{
        require(zombieApprovals[_tokenId]==msg.sender);
        address owner= ownerOf(_tokenId);
        _transfer(owner,msg.sender,_tokenId);
    }
    //批准函数
    function approve(address _to, uint256 _tokenId) public{
        zombieApprovals[_tokenId]=_to;
        emit Approval(msg.sender,_to,_tokenId);
    }
    //接收批准
}
