pragma solidity ^0.5.12;

import "./zombieHelper.sol";

contract ZombieAttack is ZombieHelper{
    //randNonce的用途，每次创建随机数都要用randNonce为计数
    uint randNonce=0;
    //设置变量僵尸胜率为70
    uint attackVictoryProbability=70;
    //_modulus控制我们生成多少位的随机数
    function randMod(uint _modulus) internal returns(uint){
        randNonce++;
        //根据now，发送者地址，randNonce生成随机数
        return uint(keccak256(abi.encodePacked(now,msg.sender,randNonce)))%_modulus;
    }
    //只能开发者调用    设置胜率
    function setattackVictoryProbability(uint _attackVictoryProbability) public onlyOwner{
        attackVictoryProbability=_attackVictoryProbability;
    }
    //攻击函数，自己的id和目标id
    function attack(uint _zombieId,uint _targetID) external onlyOwnerOf(_zombieId){
        //构造体
        Zombie storage myZombie=zombies[_zombieId];
        Zombie storage enemyZombie=zombies[_targetID];
        uint rand=randMod(100);
        if(rand<-attackVictoryProbability){
            myZombie.winCount++;
            myZombie.level++;
            enemyZombie.lossCount++;
            multiply(_zombieId,enemyZombie.dna);
        }else{
            myZombie.lossCount++;
            enemyZombie.winCount++;
            _triggerColldown(myZombie);
        }
    }

     
}
